name: Publisher

on:
  push:  
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from CMakeLists.txt
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=project\([^ ]+ VERSION )[^)]+(?=\))' CMakeLists.txt | head -2)
          if [ -z "$VERSION" ]; then
            echo "‚ùå Failed to extract version from CMakeLists.txt"
            exit 1
          fi
          echo "‚úÖ Found version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake ..

      - name: Build library
        run: |
          cd build
          make -j$(nproc)

      - name: Find library file
        id: find_lib
        run: |
          cd build
          # Look for common library file types (.a, .so, .lib, .dll)
          LIB_FILE=$(find . -type f \( -name "*.a" -o -name "*.so" -o -name "*.lib" -o -name "*.dll" \) | head -1)
          if [ -z "$LIB_FILE" ]; then
            echo "‚ùå No library file found in build directory"
            exit 1
          fi
          echo "‚úÖ Found library file: $LIB_FILE"
          echo "lib_path=$LIB_FILE" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag $TAG already exists ‚Äî skipping tag creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Tag
        if: steps.check_tag.outputs.exists == 'false' && github.ref == 'refs/heads/main'
        run: |
          VERSION="v${{ steps.get_version.outputs.version }}"
          echo "üè∑Ô∏è Tagging release as $VERSION"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a $VERSION -m "Automated release $VERSION"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $VERSION

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          files: build/${{ steps.find_lib.outputs.lib_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
